		ORG	0000H
		SJMP	MAIN

		ORG	0003H
		SJMP	TANQUE_CHEIO		; INTERRUPCAO QUANDO TANQUE ESTIVER CHEIO

		ORG	0013H
		SJMP	CONTROLE_BOMBA		; INTERRUPCAO PARA LIGAR OU DESLIGAR O MOTOR DA BOMBA

MAIN:		SETB	EA
		SETB	EX0
		SETB	EX1
		SETB	PX0			; OVERFLOW NO TANQUE - PRIORIDADE ALTA
		CLR	PX1			; GATILHO DA BOMBA - PRIORIDADE BAIXA
		; ZERA OS PORTS DO MICROCONTROLADOR
		MOV	P0, #00H
		MOV	P1, #00H
		MOV	P2, #00H
		MOV	P3, #00H
		; LIMPA OS BITS DE CONTROLE
		MOV	BITS_CONTROLE, #00H
		MOV	TMOD, #00000110B	; CONTADOR, CONTROLE POR SOFTWARE, NO MODO 2.
		MOV	TH0, #00H
		MOV	TL0, #00H
		;===KERNEL DO PROGRAMA===
MAIN_LOOP2:	JNB	TR0, $			; AGUARDA ATE QUE HAJA UM NOVO ABASTECIMENTO
		ACALL	ZERAR_DISPLAY		; ZERA OS DISPLAYS
		ACALL	INC_DISPLAY		; INCREMENTA OS LITROS NO DISPLAY, ATE PARA O ABASTECIMENTO
		SJMP	MAIN_LOOP2		; AGUARDA NOVO ABASTECIMENTO
;****************************************
TANQUE_CHEIO:
		CLR	EA
		CLR	MOTOR_BOMBA		; DESLIGA O MOTOR DA BOMBA
		CLR	TR0			; DESLIGA O CONTADOR DE PULSOS
		SETB	EA
		RETI
;****************************************
CONTROLE_BOMBA:	CLR	EA
		CPL	MOTOR_BOMBA		; LIGA OU DESLIGA O MOTOR DA BOMBA
		CPL	TR0			; LIGA OU DESLIGA O CONTADOR DE PULSOS CONFORME INTERRUPCAO GERADA
		SETB	EA
		RETI

;****************************************
;INC_DISPLAY: esta subrotina captura	*
; o valor do contador de pulsos		*
; e mostra no display a qtde de litros	*
; e o preco do abastecimento.		*
; Note que esta subrotina eh o programa	*
; "principal", uma vez que ela so deixa	*
; de ser executada depois do atendimento*
; da interrupcao, desligando TR0.	*
; Isto eh, INC_DISPLAY so deixa de ser 	*
; executada quanto para-se o		*
; fornecimento de gasolina no tanque	*
;****************************************
INC_DISPLAY:					; CASO TENHA INTERROMPIDO O ABASTECIMENTO, RETORNA AO PROGRAMA PRINCIPAL.
		JNB	TR0, END_INC
		MOV	R0, TL0			; CAPTURA O VALOR DO CONTADOR DE PULSOS
		MOV	A, R0
		 ;CONVERTE DIGITO MAIS SIGNIFICATIVO PARA DECIMAL
		MOV	B, #064H
		DIV	AB
		MOV	LITRO2, A
		MOV	TOTAL_LITROS2, A
		 ;CONVERTE DIGITO DO MEIO PARA DECIMAL
		MOV	A, B			; CAPUTRA O RESTO DA DIVISAO ANTERIOR E ARMAZENA EM A
		MOV	B, #0AH
		DIV	AB			; DIVIDE POR 10 - CAPTURA DIGITO DO MEIO
		MOV	LITRO1, A		; ARMAZENA NO DIGITO DO MEIO
		MOV	TOTAL_LITROS1, A
		; CONVERTE DIGITO MENOS SIGNFICATIVO PARA DECIMAL
		MOV	A, B
		MOV	LITRO0, A
		MOV	TOTAL_LITROS0, A
		; CONVERTE DIGITO MAIS SIGN PARA BCD - E MOSTRA NO DISPLAY
		MOV	A, LITRO2
		MOV	DPTR, #TAB
		MOVC	A, @A+DPTR
		MOV	P1, A
		SETB	P2.2
		SETB	P2.6
		; CONVERTE DIGITO DO MEIO PARA BCD - E MOSTRA NO DISPLAY
		MOV	A, LITRO1
		MOV	DPTR, #TAB
		MOVC	A, @A+DPTR
		MOV	P1, A
		SETB	P2.1
		SETB	P2.5
		; CONVERTE DIGITO MENOS SIGN. PARA BCD - E MOSTRA NO DISPLAY
		MOV	A, LITRO0
		MOV	DPTR, #TAB
		MOVC	A, @A+DPTR
		MOV	P1, A
		SETB	P2.0
		SETB	P2.4
		; GERA DELAY PARA VISUALIZACAO NO DISPLAY
		; START: Wait loop, time: 100 ms
		; Clock: 12000.0 kHz (12 / MC)
		; Used registers: R7, R6, R5
		MOV	R5, #004h
		MOV	R6, #0A0h
		MOV	R7, #04Ch
		NOP
		DJNZ	R7, $
		DJNZ	R6, $-5
		DJNZ	R5, $-9
		MOV	R7, #049h
		DJNZ	R7, $
		; Rest: 0
		; END: Wait loop
		SJMP	INC_DISPLAY
; ===***===>>> QUESTAO 9 DA LISTA = EH AQUI QUE A********
; SUBROTINA DE COMUNICACAO RS232 COM MONITOR DE VIDEO****
; SERA CHAMADA*******************************************
		CLR	EA
		ACALL	ENVIAR_PRECO
		SETB	EA
END_INC:	RET

;****************************************
; ZERAR_DISPLAY: zera os displays	*
;****************************************
ZERAR_DISPLAY:
		MOV	A, #01H
		MOV	R0, #7EH	; 7EH - CODICO BCD DO DIGITO 0
		; ZERANDO DISPLAY 1
		MOV	P1, R0
		RL	A
		; ZERANDO DISPLAY 2
		MOV	P1, R0
		RL	A
		; ZERANDO DISPLAY 3
		MOV	P1, R0
		RL	A
		; ZERANDO DISPLAY 4
		MOV	P1, R0
		RL	A
		; ZERANDO DISPLAY 5
		MOV	P1, R0
		RL	A
		; ZERANDO DISPLAY 6
		MOV	P1, R0
		RL	A
		; ZERANDO DISPLAY 7
		MOV	P1, R0
		RL	A
		; ZERANDO DISPLAY 8
		MOV	P1, R0
		RL	A
END_ZERAR:	RET

ENVIAR_PRECO:
		MOV	TMOD, #00000010B
		MOV	TH0, #253
		MOV	TL0, #253
		MOV	SCON, #40H		; MODO 1 DO CANAL SERIAL
		SETB	TR0
		; LIMPA A TELA E POSICIONA O CURSOR NO INCICIO
		MOV	DPTR, #CLR_SCREEN
		ACALL	PRINT_MSG1
		; IMPRIME NO MONITOR O TOTAL DE LITROS ABASTECIDOS
		MOV	DPTR, #MSG1
		ACALL	PRINT_MSG1
		ACALL	PRINT_LITROS
		MOV	DPTR, #MSG3		; IMPRIME CASAS DECIMAIS E NOVA LINHA
		ACALL	PRINT_MSG1
		; IMPRIME NO MONITOR DE VIDEO O PRECO TOTAL
		MOV	DPTR, #MSG2
		ACALL	PRINT_MSG1
		ACALL	PRINT_LITROS
		MOV	DPTR, #MSG3		; IMPRIME CASAS DECIMAIS E NOVA LINHA
		ACALL	PRINT_MSG1
		; AGUARDA SINAL DE OK
		SETB	REN
AGUARDA_OK:	JNB	RI, $
		MOV	A, SBUF
		CLR	RI
		CJNE	A, #03CH, AGUARDA_OK
		MOV	P0, A			; RETRANSMITE O CODIGO "OK" PARA A BOMBA.
		RET

;****************************************
; PRINT_MSG1: IMPRIME A MENSAGEM	*
; CARREGADA NO DPTR			*
;****************************************
PRINT_MSG1:	CLR	A
		MOVC	A, @A+DPTR
		CJNE	A, #00H, LOOP_MSG1
		SJMP	END_PRINT1
LOOP_MSG1:	MOV	SBUF, A
		JNB	TI, $
		CLR	TI
		INC	DPTR
		SJMP	PRINT_MSG1
END_PRINT1:	RET


;****************************************
; PRINT_LITROS: imprime no monitor	*
; de video quantos litros foram		*
; abastecidos				*
;****************************************
PRINT_LITROS:   ; IMPRIME O DIGITO MAIS SIGNIFICATIVO
		MOV	SBUF, TOTAL_LITROS2
		JNB	TI, $
		CLR	TI
		; IMPRIME O DIGITO INTERMEDIARIO
		MOV	SBUF, TOTAL_LITROS1
		JNB	TI, $
		CLR	TI
		; IMPRIME O DIGITO MENOS SIGNIFICATIVO
		MOV	SBUF, TOTAL_LITROS0
		JNB	TI, $
		CLR	TI
		RET

		; ***BITS DE CONTROLE***
BITS_CONTROLE	EQU	20H

		; CASO O BIT ESTEJA SETADO - TANQUE CHEIO! INTERROMPER ABASTECIMENTO.
JA_CHEIO	EQU	20H.0

		; CASO O BIT ESTEJA SETADO - MOTOR DA BOMBA ACIONADO
MOTOR_BOMBA	EQU	P3.7

		; AMAZENA O TOTAL DE LITROS ABASTECIDOS EM ASCII
TOTAL_LITROS2	EQU	35H
TOTAL_LITROS1	EQU	34H
TOTAL_LITROS0	EQU	33H

		; DO MENOS SIGN. PRO MAIS SIGN., ARMAZENA O TOTAL DE LITROS EM BCD (BUFFER DE DADOS DA RAM INTERNA)
LITRO2		EQU	32H
LITRO1		EQU	31H
LITRO0		EQU	30H

		; *** TABELA - DIGITOS 7 SEGMENTOS - CATODO COMUM.
TAB:		DB	7EH, 30H, 6DH, 79H, 33H, 5BH, 5FH, 70H, 7FH, 7BH, 77H, 1FH, 4EH, 3DH, 4FH, 47H

MSG1:		DB	'LITROS ABASTECIDOS: ', 0
MSG2:		DB	'TOTAL A PAGAR: R$', 0
MSG3:		DB	', 00', 0AH, 0
CLR_SCREEN:	DB	1BH, 'C', 0			; LIMPA TODA A TELA E POSICIONA O CURSOR NO COMECO
		END